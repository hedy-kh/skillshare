import type { ClerkPaginatedResponse, ClerkResourceReloadParams, GetUserOrganizationMembershipParams, MembershipRole, OrganizationMembershipJSON, OrganizationMembershipResource, OrganizationPermission } from '@clerk/types';
import { BaseResource, Organization, PublicUserData } from './internal';
export declare class OrganizationMembership extends BaseResource implements OrganizationMembershipResource {
    id: string;
    publicMetadata: OrganizationMembershipPublicMetadata;
    publicUserData: PublicUserData;
    organization: Organization;
    /**
     * @experimental The property is experimental and subject to change in future releases.
     */
    permissions: (OrganizationPermission | (string & {}))[];
    role: MembershipRole;
    createdAt: Date;
    updatedAt: Date;
    constructor(data: OrganizationMembershipJSON);
    static retrieve: GetOrganizationMembershipsClass;
    destroy: () => Promise<OrganizationMembership>;
    update: ({ role }: UpdateOrganizationMembershipParams) => Promise<OrganizationMembership>;
    protected fromJSON(data: OrganizationMembershipJSON | null): this;
    reload(params?: ClerkResourceReloadParams): Promise<this>;
}
export type UpdateOrganizationMembershipParams = {
    role: MembershipRole;
};
/**
 * @deprecated
 */
export type RetrieveMembershipsParams = {
    /**
     * @deprecated Use pageSize instead
     */
    limit?: number;
    /**
     * @deprecated Use initialPage instead
     */
    offset?: number;
};
type MembershipParams = (RetrieveMembershipsParams | GetUserOrganizationMembershipParams) & {
    paginated?: boolean;
};
export type GetOrganizationMembershipsClass = <T extends MembershipParams>(params?: T) => T['paginated'] extends true ? Promise<ClerkPaginatedResponse<OrganizationMembership>> : Promise<OrganizationMembership[]>;
export {};
